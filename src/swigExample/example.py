# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_example', [dirname(__file__)])
        except ImportError:
            import _example
            return _example
        if fp is not None:
            try:
                _mod = imp.load_module('_example', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _example = swig_import_helper()
    del swig_import_helper
else:
    import _example
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_example.MCELL_SUCCESS_swigconstant(_example)
MCELL_SUCCESS = _example.MCELL_SUCCESS

_example.MCELL_FAIL_swigconstant(_example)
MCELL_FAIL = _example.MCELL_FAIL
class num_expr_list_head(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, num_expr_list_head, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, num_expr_list_head, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value_head"] = _example.num_expr_list_head_value_head_set
    __swig_getmethods__["value_head"] = _example.num_expr_list_head_value_head_get
    if _newclass:
        value_head = _swig_property(_example.num_expr_list_head_value_head_get, _example.num_expr_list_head_value_head_set)
    __swig_setmethods__["value_tail"] = _example.num_expr_list_head_value_tail_set
    __swig_getmethods__["value_tail"] = _example.num_expr_list_head_value_tail_get
    if _newclass:
        value_tail = _swig_property(_example.num_expr_list_head_value_tail_get, _example.num_expr_list_head_value_tail_set)
    __swig_setmethods__["value_count"] = _example.num_expr_list_head_value_count_set
    __swig_getmethods__["value_count"] = _example.num_expr_list_head_value_count_get
    if _newclass:
        value_count = _swig_property(_example.num_expr_list_head_value_count_get, _example.num_expr_list_head_value_count_set)
    __swig_setmethods__["shared"] = _example.num_expr_list_head_shared_set
    __swig_getmethods__["shared"] = _example.num_expr_list_head_shared_get
    if _newclass:
        shared = _swig_property(_example.num_expr_list_head_shared_get, _example.num_expr_list_head_shared_set)

    def __init__(self):
        this = _example.new_num_expr_list_head()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_num_expr_list_head
    __del__ = lambda self: None
num_expr_list_head_swigregister = _example.num_expr_list_head_swigregister
num_expr_list_head_swigregister(num_expr_list_head)


def mcell_create():
    return _example.mcell_create()
mcell_create = _example.mcell_create

def mcell_init_state(state):
    return _example.mcell_init_state(state)
mcell_init_state = _example.mcell_init_state

def mcell_parse_mdl(state):
    return _example.mcell_parse_mdl(state)
mcell_parse_mdl = _example.mcell_parse_mdl

def mcell_init_simulation(state):
    return _example.mcell_init_simulation(state)
mcell_init_simulation = _example.mcell_init_simulation

def mcell_init_read_checkpoint(state):
    return _example.mcell_init_read_checkpoint(state)
mcell_init_read_checkpoint = _example.mcell_init_read_checkpoint

def mcell_init_output(state):
    return _example.mcell_init_output(state)
mcell_init_output = _example.mcell_init_output

def mcell_set_partition(state, dim, head):
    return _example.mcell_set_partition(state, dim, head)
mcell_set_partition = _example.mcell_set_partition

def mcell_set_time_step(state, step):
    return _example.mcell_set_time_step(state, step)
mcell_set_time_step = _example.mcell_set_time_step

def mcell_set_iterations(state, iterations):
    return _example.mcell_set_iterations(state, iterations)
mcell_set_iterations = _example.mcell_set_iterations

def mcell_print_version():
    return _example.mcell_print_version()
mcell_print_version = _example.mcell_print_version

def mcell_print_usage(executable_name):
    return _example.mcell_print_usage(executable_name)
mcell_print_usage = _example.mcell_print_usage

def mcell_print_stats():
    return _example.mcell_print_stats()
mcell_print_stats = _example.mcell_print_stats

def mcell_argparse(argc, argv, state):
    return _example.mcell_argparse(argc, argv, state)
mcell_argparse = _example.mcell_argparse

def mcell_copysort_numeric_list(head):
    return _example.mcell_copysort_numeric_list(head)
mcell_copysort_numeric_list = _example.mcell_copysort_numeric_list

def mcell_sort_numeric_list(head):
    return _example.mcell_sort_numeric_list(head)
mcell_sort_numeric_list = _example.mcell_sort_numeric_list

def mcell_free_numeric_list(nel):
    return _example.mcell_free_numeric_list(nel)
mcell_free_numeric_list = _example.mcell_free_numeric_list

def mcell_generate_range(list, start, end, step):
    return _example.mcell_generate_range(list, start, end, step)
mcell_generate_range = _example.mcell_generate_range

def advance_range(list, tmp_dbl):
    return _example.advance_range(list, tmp_dbl)
advance_range = _example.advance_range

def mcell_generate_range_singleton(lh, value):
    return _example.mcell_generate_range_singleton(lh, value)
mcell_generate_range_singleton = _example.mcell_generate_range_singleton

def mcell_print(message):
    return _example.mcell_print(message)
mcell_print = _example.mcell_print
class object_creation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, object_creation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, object_creation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["object_name_list"] = _example.object_creation_object_name_list_set
    __swig_getmethods__["object_name_list"] = _example.object_creation_object_name_list_get
    if _newclass:
        object_name_list = _swig_property(_example.object_creation_object_name_list_get, _example.object_creation_object_name_list_set)
    __swig_setmethods__["object_name_list_end"] = _example.object_creation_object_name_list_end_set
    __swig_getmethods__["object_name_list_end"] = _example.object_creation_object_name_list_end_get
    if _newclass:
        object_name_list_end = _swig_property(_example.object_creation_object_name_list_end_get, _example.object_creation_object_name_list_end_set)
    __swig_setmethods__["current_object"] = _example.object_creation_current_object_set
    __swig_getmethods__["current_object"] = _example.object_creation_current_object_get
    if _newclass:
        current_object = _swig_property(_example.object_creation_current_object_get, _example.object_creation_current_object_set)

    def __init__(self):
        this = _example.new_object_creation()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_object_creation
    __del__ = lambda self: None
object_creation_swigregister = _example.object_creation_swigregister
object_creation_swigregister(object_creation)

class poly_object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, poly_object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, poly_object, name)
    __repr__ = _swig_repr
    __swig_setmethods__["obj_name"] = _example.poly_object_obj_name_set
    __swig_getmethods__["obj_name"] = _example.poly_object_obj_name_get
    if _newclass:
        obj_name = _swig_property(_example.poly_object_obj_name_get, _example.poly_object_obj_name_set)
    __swig_setmethods__["vertices"] = _example.poly_object_vertices_set
    __swig_getmethods__["vertices"] = _example.poly_object_vertices_get
    if _newclass:
        vertices = _swig_property(_example.poly_object_vertices_get, _example.poly_object_vertices_set)
    __swig_setmethods__["num_vert"] = _example.poly_object_num_vert_set
    __swig_getmethods__["num_vert"] = _example.poly_object_num_vert_get
    if _newclass:
        num_vert = _swig_property(_example.poly_object_num_vert_get, _example.poly_object_num_vert_set)
    __swig_setmethods__["connections"] = _example.poly_object_connections_set
    __swig_getmethods__["connections"] = _example.poly_object_connections_get
    if _newclass:
        connections = _swig_property(_example.poly_object_connections_get, _example.poly_object_connections_set)
    __swig_setmethods__["num_conn"] = _example.poly_object_num_conn_set
    __swig_getmethods__["num_conn"] = _example.poly_object_num_conn_get
    if _newclass:
        num_conn = _swig_property(_example.poly_object_num_conn_get, _example.poly_object_num_conn_set)

    def __init__(self):
        this = _example.new_poly_object()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_poly_object
    __del__ = lambda self: None
poly_object_swigregister = _example.poly_object_swigregister
poly_object_swigregister(poly_object)


def mcell_create_instance_object(state, name, new_object):
    return _example.mcell_create_instance_object(state, name, new_object)
mcell_create_instance_object = _example.mcell_create_instance_object

def mcell_create_poly_object(state, parent, poly_obj, new_object):
    return _example.mcell_create_poly_object(state, parent, poly_obj, new_object)
mcell_create_poly_object = _example.mcell_create_poly_object

def new_polygon_list(state, obj_ptr, n_vertices, vertices, n_connections, connections):
    return _example.new_polygon_list(state, obj_ptr, n_vertices, vertices, n_connections, connections)
new_polygon_list = _example.new_polygon_list

def make_new_object(state, obj_name, error_code):
    return _example.make_new_object(state, obj_name, error_code)
make_new_object = _example.make_new_object

def push_object_name(obj_creation, name):
    return _example.push_object_name(obj_creation, name)
push_object_name = _example.push_object_name

def pop_object_name(obj_creation):
    return _example.pop_object_name(obj_creation)
pop_object_name = _example.pop_object_name

def mcell_add_to_vertex_list(x, y, z, vertices):
    return _example.mcell_add_to_vertex_list(x, y, z, vertices)
mcell_add_to_vertex_list = _example.mcell_add_to_vertex_list

def free_vertex_list(vert_list):
    return _example.free_vertex_list(vert_list)
free_vertex_list = _example.free_vertex_list

def mcell_add_to_connection_list(v1, v2, v3, elements):
    return _example.mcell_add_to_connection_list(v1, v2, v3, elements)
mcell_add_to_connection_list = _example.mcell_add_to_connection_list

def free_connection_list(elem_conn_list):
    return _example.free_connection_list(elem_conn_list)
free_connection_list = _example.free_connection_list

def mcell_set_region_elements(rgn, elements, normalize_now):
    return _example.mcell_set_region_elements(rgn, elements, normalize_now)
mcell_set_region_elements = _example.mcell_set_region_elements

def mcell_add_to_region_list(elements, region_idx):
    return _example.mcell_add_to_region_list(elements, region_idx)
mcell_add_to_region_list = _example.mcell_add_to_region_list

def add_child_objects(parent, child_head, child_tail):
    return _example.add_child_objects(parent, child_head, child_tail)
add_child_objects = _example.add_child_objects

def mcell_create_region(state, objp, name):
    return _example.mcell_create_region(state, objp, name)
mcell_create_region = _example.mcell_create_region

def make_new_region(state, obj_name, region_last_name):
    return _example.make_new_region(state, obj_name, region_last_name)
make_new_region = _example.make_new_region

def remove_gaps_from_regions(obj_ptr):
    return _example.remove_gaps_from_regions(obj_ptr)
remove_gaps_from_regions = _example.remove_gaps_from_regions

def check_degenerate_polygon_list(obj_ptr):
    return _example.check_degenerate_polygon_list(obj_ptr)
check_degenerate_polygon_list = _example.check_degenerate_polygon_list

def common_ancestor(a, b):
    return _example.common_ancestor(a, b)
common_ancestor = _example.common_ancestor

def allocate_polygon_object(desc):
    return _example.allocate_polygon_object(desc)
allocate_polygon_object = _example.allocate_polygon_object

def new_element_list(begin, end):
    return _example.new_element_list(begin, end)
new_element_list = _example.new_element_list

def normalize_elements(reg, existing):
    return _example.normalize_elements(reg, existing)
normalize_elements = _example.normalize_elements

def count_cuboid_elements(sb):
    return _example.count_cuboid_elements(sb)
count_cuboid_elements = _example.count_cuboid_elements

def cuboid_patch_to_bits(subd_box, v1, v2, bit_arr):
    return _example.cuboid_patch_to_bits(subd_box, v1, v2, bit_arr)
cuboid_patch_to_bits = _example.cuboid_patch_to_bits

def check_patch(b, p1, p2, egd):
    return _example.check_patch(b, p1, p2, egd)
check_patch = _example.check_patch
class output_column_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, output_column_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, output_column_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["column_head"] = _example.output_column_list_column_head_set
    __swig_getmethods__["column_head"] = _example.output_column_list_column_head_get
    if _newclass:
        column_head = _swig_property(_example.output_column_list_column_head_get, _example.output_column_list_column_head_set)
    __swig_setmethods__["column_tail"] = _example.output_column_list_column_tail_set
    __swig_getmethods__["column_tail"] = _example.output_column_list_column_tail_get
    if _newclass:
        column_tail = _swig_property(_example.output_column_list_column_tail_get, _example.output_column_list_column_tail_set)

    def __init__(self):
        this = _example.new_output_column_list()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_output_column_list
    __del__ = lambda self: None
output_column_list_swigregister = _example.output_column_list_swigregister
output_column_list_swigregister(output_column_list)

class output_set_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, output_set_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, output_set_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["set_head"] = _example.output_set_list_set_head_set
    __swig_getmethods__["set_head"] = _example.output_set_list_set_head_get
    if _newclass:
        set_head = _swig_property(_example.output_set_list_set_head_get, _example.output_set_list_set_head_set)
    __swig_setmethods__["set_tail"] = _example.output_set_list_set_tail_set
    __swig_getmethods__["set_tail"] = _example.output_set_list_set_tail_get
    if _newclass:
        set_tail = _swig_property(_example.output_set_list_set_tail_get, _example.output_set_list_set_tail_set)

    def __init__(self):
        this = _example.new_output_set_list()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_output_set_list
    __del__ = lambda self: None
output_set_list_swigregister = _example.output_set_list_swigregister
output_set_list_swigregister(output_set_list)

class output_times_inlist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, output_times_inlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, output_times_inlist, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _example.output_times_inlist_type_set
    __swig_getmethods__["type"] = _example.output_times_inlist_type_get
    if _newclass:
        type = _swig_property(_example.output_times_inlist_type_get, _example.output_times_inlist_type_set)
    __swig_setmethods__["step"] = _example.output_times_inlist_step_set
    __swig_getmethods__["step"] = _example.output_times_inlist_step_get
    if _newclass:
        step = _swig_property(_example.output_times_inlist_step_get, _example.output_times_inlist_step_set)
    __swig_setmethods__["values"] = _example.output_times_inlist_values_set
    __swig_getmethods__["values"] = _example.output_times_inlist_values_get
    if _newclass:
        values = _swig_property(_example.output_times_inlist_values_get, _example.output_times_inlist_values_set)

    def __init__(self):
        this = _example.new_output_times_inlist()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_output_times_inlist
    __del__ = lambda self: None
output_times_inlist_swigregister = _example.output_times_inlist_swigregister
output_times_inlist_swigregister(output_times_inlist)


def mcell_get_count(nameM, nameR, world):
    return _example.mcell_get_count(nameM, nameR, world)
mcell_get_count = _example.mcell_get_count

def mcell_new_output_request(state, target, orientation, location, img, report_flags):
    return _example.mcell_new_output_request(state, target, orientation, location, img, report_flags)
mcell_new_output_request = _example.mcell_new_output_request

def mcell_create_new_output_set(comment, exact_time, col_head, file_flags, outfile_name):
    return _example.mcell_create_new_output_set(comment, exact_time, col_head, file_flags, outfile_name)
mcell_create_new_output_set = _example.mcell_create_new_output_set

def mcell_prepare_single_count_expr(list, expr, custom_header):
    return _example.mcell_prepare_single_count_expr(list, expr, custom_header)
mcell_prepare_single_count_expr = _example.mcell_prepare_single_count_expr

def mcell_add_reaction_output_block(state, osets, buffer_size, otimes):
    return _example.mcell_add_reaction_output_block(state, osets, buffer_size, otimes)
mcell_add_reaction_output_block = _example.mcell_add_reaction_output_block

def mcell_create_count(state, target, orientation, location, report_flags, custom_header, count_list):
    return _example.mcell_create_count(state, target, orientation, location, report_flags, custom_header, count_list)
mcell_create_count = _example.mcell_create_count

def mcell_get_counter_value(state, counter_name, column, count_data, count_data_type):
    return _example.mcell_get_counter_value(state, counter_name, column, count_data, count_data_type)
mcell_get_counter_value = _example.mcell_get_counter_value

_example.REGULAR_ARROW_swigconstant(_example)
REGULAR_ARROW = _example.REGULAR_ARROW

_example.ARROW_BIDIRECTIONAL_swigconstant(_example)
ARROW_BIDIRECTIONAL = _example.ARROW_BIDIRECTIONAL

_example.ARROW_CATALYTIC_swigconstant(_example)
ARROW_CATALYTIC = _example.ARROW_CATALYTIC

_example.RATE_UNSET_swigconstant(_example)
RATE_UNSET = _example.RATE_UNSET

_example.RATE_CONSTANT_swigconstant(_example)
RATE_CONSTANT = _example.RATE_CONSTANT

_example.RATE_FILE_swigconstant(_example)
RATE_FILE = _example.RATE_FILE

_example.RFLCT_swigconstant(_example)
RFLCT = _example.RFLCT

_example.TRANSP_swigconstant(_example)
TRANSP = _example.TRANSP

_example.SINK_swigconstant(_example)
SINK = _example.SINK
class reaction_def(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reaction_def, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reaction_def, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sym"] = _example.reaction_def_sym_set
    __swig_getmethods__["sym"] = _example.reaction_def_sym_get
    if _newclass:
        sym = _swig_property(_example.reaction_def_sym_get, _example.reaction_def_sym_set)

    def __init__(self):
        this = _example.new_reaction_def()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_reaction_def
    __del__ = lambda self: None
reaction_def_swigregister = _example.reaction_def_swigregister
reaction_def_swigregister(reaction_def)

class release_single_molecule_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, release_single_molecule_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, release_single_molecule_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rsm_head"] = _example.release_single_molecule_list_rsm_head_set
    __swig_getmethods__["rsm_head"] = _example.release_single_molecule_list_rsm_head_get
    if _newclass:
        rsm_head = _swig_property(_example.release_single_molecule_list_rsm_head_get, _example.release_single_molecule_list_rsm_head_set)
    __swig_setmethods__["rsm_tail"] = _example.release_single_molecule_list_rsm_tail_set
    __swig_getmethods__["rsm_tail"] = _example.release_single_molecule_list_rsm_tail_get
    if _newclass:
        rsm_tail = _swig_property(_example.release_single_molecule_list_rsm_tail_get, _example.release_single_molecule_list_rsm_tail_set)
    __swig_setmethods__["rsm_count"] = _example.release_single_molecule_list_rsm_count_set
    __swig_getmethods__["rsm_count"] = _example.release_single_molecule_list_rsm_count_get
    if _newclass:
        rsm_count = _swig_property(_example.release_single_molecule_list_rsm_count_get, _example.release_single_molecule_list_rsm_count_set)

    def __init__(self):
        this = _example.new_release_single_molecule_list()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_release_single_molecule_list
    __del__ = lambda self: None
release_single_molecule_list_swigregister = _example.release_single_molecule_list_swigregister
release_single_molecule_list_swigregister(release_single_molecule_list)

class reaction_arrow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reaction_arrow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reaction_arrow, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _example.reaction_arrow_flags_set
    __swig_getmethods__["flags"] = _example.reaction_arrow_flags_get
    if _newclass:
        flags = _swig_property(_example.reaction_arrow_flags_get, _example.reaction_arrow_flags_set)
    __swig_setmethods__["catalyst"] = _example.reaction_arrow_catalyst_set
    __swig_getmethods__["catalyst"] = _example.reaction_arrow_catalyst_get
    if _newclass:
        catalyst = _swig_property(_example.reaction_arrow_catalyst_get, _example.reaction_arrow_catalyst_set)

    def __init__(self):
        this = _example.new_reaction_arrow()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_reaction_arrow
    __del__ = lambda self: None
reaction_arrow_swigregister = _example.reaction_arrow_swigregister
reaction_arrow_swigregister(reaction_arrow)

class reaction_rate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reaction_rate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reaction_rate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rate_type"] = _example.reaction_rate_rate_type_set
    __swig_getmethods__["rate_type"] = _example.reaction_rate_rate_type_get
    if _newclass:
        rate_type = _swig_property(_example.reaction_rate_rate_type_get, _example.reaction_rate_rate_type_set)
    __swig_getmethods__["v"] = _example.reaction_rate_v_get
    if _newclass:
        v = _swig_property(_example.reaction_rate_v_get)

    def __init__(self):
        this = _example.new_reaction_rate()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_reaction_rate
    __del__ = lambda self: None
reaction_rate_swigregister = _example.reaction_rate_swigregister
reaction_rate_swigregister(reaction_rate)

class reaction_rate_v(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reaction_rate_v, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reaction_rate_v, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rate_constant"] = _example.reaction_rate_v_rate_constant_set
    __swig_getmethods__["rate_constant"] = _example.reaction_rate_v_rate_constant_get
    if _newclass:
        rate_constant = _swig_property(_example.reaction_rate_v_rate_constant_get, _example.reaction_rate_v_rate_constant_set)
    __swig_setmethods__["rate_file"] = _example.reaction_rate_v_rate_file_set
    __swig_getmethods__["rate_file"] = _example.reaction_rate_v_rate_file_get
    if _newclass:
        rate_file = _swig_property(_example.reaction_rate_v_rate_file_get, _example.reaction_rate_v_rate_file_set)

    def __init__(self):
        this = _example.new_reaction_rate_v()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_reaction_rate_v
    __del__ = lambda self: None
reaction_rate_v_swigregister = _example.reaction_rate_v_swigregister
reaction_rate_v_swigregister(reaction_rate_v)

class reaction_rates(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reaction_rates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reaction_rates, name)
    __repr__ = _swig_repr
    __swig_setmethods__["forward_rate"] = _example.reaction_rates_forward_rate_set
    __swig_getmethods__["forward_rate"] = _example.reaction_rates_forward_rate_get
    if _newclass:
        forward_rate = _swig_property(_example.reaction_rates_forward_rate_get, _example.reaction_rates_forward_rate_set)
    __swig_setmethods__["backward_rate"] = _example.reaction_rates_backward_rate_set
    __swig_getmethods__["backward_rate"] = _example.reaction_rates_backward_rate_get
    if _newclass:
        backward_rate = _swig_property(_example.reaction_rates_backward_rate_get, _example.reaction_rates_backward_rate_set)

    def __init__(self):
        this = _example.new_reaction_rates()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_reaction_rates
    __del__ = lambda self: None
reaction_rates_swigregister = _example.reaction_rates_swigregister
reaction_rates_swigregister(reaction_rates)


def mcell_modify_rate_constant(world, name, rate):
    return _example.mcell_modify_rate_constant(world, name, rate)
mcell_modify_rate_constant = _example.mcell_modify_rate_constant

def mcell_add_reaction(notify, r_step_release, rxn_sym_table, radial_subdivisions, vacancy_search_dist2, reactants, react_arrow, surf_class, products, pathname, rates, forward_rate_filename, backward_rate_filename):
    return _example.mcell_add_reaction(notify, r_step_release, rxn_sym_table, radial_subdivisions, vacancy_search_dist2, reactants, react_arrow, surf_class, products, pathname, rates, forward_rate_filename, backward_rate_filename)
mcell_add_reaction = _example.mcell_add_reaction

def mcell_add_surface_reaction(rxn_sym_table, reaction_type, surface_class, reactant_sym, orient):
    return _example.mcell_add_surface_reaction(rxn_sym_table, reaction_type, surface_class, reactant_sym, orient)
mcell_add_surface_reaction = _example.mcell_add_surface_reaction

def mcell_add_concentration_clamp(rxn_sym_table, surface_class, mol_sym, orient, conc):
    return _example.mcell_add_concentration_clamp(rxn_sym_table, surface_class, mol_sym, orient, conc)
mcell_add_concentration_clamp = _example.mcell_add_concentration_clamp

def init_reactions(state):
    return _example.init_reactions(state)
init_reactions = _example.init_reactions

def mcell_change_reaction_rate(state, reaction_name, new_rate):
    return _example.mcell_change_reaction_rate(state, reaction_name, new_rate)
mcell_change_reaction_rate = _example.mcell_change_reaction_rate

def mcell_create_reaction_rates(forwardRateType, forwardRate, backwardRateType, backwardRate):
    return _example.mcell_create_reaction_rates(forwardRateType, forwardRate, backwardRateType, backwardRate)
mcell_create_reaction_rates = _example.mcell_create_reaction_rates

def mcell_create_geometrical_release_site(state, parent, site_name, shape, position, diameter, mol, num_molecules, release_prob, pattern_name, new_object):
    return _example.mcell_create_geometrical_release_site(state, parent, site_name, shape, position, diameter, mol, num_molecules, release_prob, pattern_name, new_object)
mcell_create_geometrical_release_site = _example.mcell_create_geometrical_release_site

def mcell_start_release_site(state, sym_ptr, obj):
    return _example.mcell_start_release_site(state, sym_ptr, obj)
mcell_start_release_site = _example.mcell_start_release_site

def mcell_finish_release_site(sym_ptr, obj):
    return _example.mcell_finish_release_site(sym_ptr, obj)
mcell_finish_release_site = _example.mcell_finish_release_site

def set_release_site_concentration(rel_site_obj_ptr, conc):
    return _example.set_release_site_concentration(rel_site_obj_ptr, conc)
set_release_site_concentration = _example.set_release_site_concentration

def mcell_create_region_release(state, parent, release_on_in, site_name, reg_name, mol, num_molecules, rel_prob, pattern_name, new_object):
    return _example.mcell_create_region_release(state, parent, release_on_in, site_name, reg_name, mol, num_molecules, rel_prob, pattern_name, new_object)
mcell_create_region_release = _example.mcell_create_region_release

def mcell_set_release_site_geometry_region(state, rel_site_obj_ptr, objp, re):
    return _example.mcell_set_release_site_geometry_region(state, rel_site_obj_ptr, objp, re)
mcell_set_release_site_geometry_region = _example.mcell_set_release_site_geometry_region

def check_release_regions(rel, parent, instance):
    return _example.check_release_regions(rel, parent, instance)
check_release_regions = _example.check_release_regions

def is_release_site_valid(rel_site_obj_ptr):
    return _example.is_release_site_valid(rel_site_obj_ptr)
is_release_site_valid = _example.is_release_site_valid

def new_release_region_expr_term(my_sym):
    return _example.new_release_region_expr_term(my_sym)
new_release_region_expr_term = _example.new_release_region_expr_term

def set_release_site_constant_number(rel_site_obj_ptr, num):
    return _example.set_release_site_constant_number(rel_site_obj_ptr, num)
set_release_site_constant_number = _example.set_release_site_constant_number

def set_release_site_gaussian_number(rel_site_obj_ptr, mean, stdev):
    return _example.set_release_site_gaussian_number(rel_site_obj_ptr, mean, stdev)
set_release_site_gaussian_number = _example.set_release_site_gaussian_number

def new_release_region_expr_binary(reL, reR, op):
    return _example.new_release_region_expr_binary(reL, reR, op)
new_release_region_expr_binary = _example.new_release_region_expr_binary

def set_release_site_location(state, rel_site_obj_ptr, location):
    return _example.set_release_site_location(state, rel_site_obj_ptr, location)
set_release_site_location = _example.set_release_site_location
class mcell_species_spec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mcell_species_spec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mcell_species_spec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _example.mcell_species_spec_name_set
    __swig_getmethods__["name"] = _example.mcell_species_spec_name_get
    if _newclass:
        name = _swig_property(_example.mcell_species_spec_name_get, _example.mcell_species_spec_name_set)
    __swig_setmethods__["D"] = _example.mcell_species_spec_D_set
    __swig_getmethods__["D"] = _example.mcell_species_spec_D_get
    if _newclass:
        D = _swig_property(_example.mcell_species_spec_D_get, _example.mcell_species_spec_D_set)
    __swig_setmethods__["is_2d"] = _example.mcell_species_spec_is_2d_set
    __swig_getmethods__["is_2d"] = _example.mcell_species_spec_is_2d_get
    if _newclass:
        is_2d = _swig_property(_example.mcell_species_spec_is_2d_get, _example.mcell_species_spec_is_2d_set)
    __swig_setmethods__["custom_time_step"] = _example.mcell_species_spec_custom_time_step_set
    __swig_getmethods__["custom_time_step"] = _example.mcell_species_spec_custom_time_step_get
    if _newclass:
        custom_time_step = _swig_property(_example.mcell_species_spec_custom_time_step_get, _example.mcell_species_spec_custom_time_step_set)
    __swig_setmethods__["target_only"] = _example.mcell_species_spec_target_only_set
    __swig_getmethods__["target_only"] = _example.mcell_species_spec_target_only_get
    if _newclass:
        target_only = _swig_property(_example.mcell_species_spec_target_only_get, _example.mcell_species_spec_target_only_set)
    __swig_setmethods__["max_step_length"] = _example.mcell_species_spec_max_step_length_set
    __swig_getmethods__["max_step_length"] = _example.mcell_species_spec_max_step_length_get
    if _newclass:
        max_step_length = _swig_property(_example.mcell_species_spec_max_step_length_get, _example.mcell_species_spec_max_step_length_set)
    __swig_setmethods__["space_step"] = _example.mcell_species_spec_space_step_set
    __swig_getmethods__["space_step"] = _example.mcell_species_spec_space_step_get
    if _newclass:
        space_step = _swig_property(_example.mcell_species_spec_space_step_get, _example.mcell_species_spec_space_step_set)

    def __init__(self):
        this = _example.new_mcell_species_spec()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_mcell_species_spec
    __del__ = lambda self: None
mcell_species_spec_swigregister = _example.mcell_species_spec_swigregister
mcell_species_spec_swigregister(mcell_species_spec)

class mcell_species(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mcell_species, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mcell_species, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _example.mcell_species_next_set
    __swig_getmethods__["next"] = _example.mcell_species_next_get
    if _newclass:
        next = _swig_property(_example.mcell_species_next_get, _example.mcell_species_next_set)
    __swig_setmethods__["mol_type"] = _example.mcell_species_mol_type_set
    __swig_getmethods__["mol_type"] = _example.mcell_species_mol_type_get
    if _newclass:
        mol_type = _swig_property(_example.mcell_species_mol_type_get, _example.mcell_species_mol_type_set)
    __swig_setmethods__["orient_set"] = _example.mcell_species_orient_set_set
    __swig_getmethods__["orient_set"] = _example.mcell_species_orient_set_get
    if _newclass:
        orient_set = _swig_property(_example.mcell_species_orient_set_get, _example.mcell_species_orient_set_set)
    __swig_setmethods__["orient"] = _example.mcell_species_orient_set
    __swig_getmethods__["orient"] = _example.mcell_species_orient_get
    if _newclass:
        orient = _swig_property(_example.mcell_species_orient_get, _example.mcell_species_orient_set)

    def __init__(self):
        this = _example.new_mcell_species()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_mcell_species
    __del__ = lambda self: None
mcell_species_swigregister = _example.mcell_species_swigregister
mcell_species_swigregister(mcell_species)

class mcell_species_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mcell_species_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mcell_species_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mol_type_head"] = _example.mcell_species_list_mol_type_head_set
    __swig_getmethods__["mol_type_head"] = _example.mcell_species_list_mol_type_head_get
    if _newclass:
        mol_type_head = _swig_property(_example.mcell_species_list_mol_type_head_get, _example.mcell_species_list_mol_type_head_set)
    __swig_setmethods__["mol_type_tail"] = _example.mcell_species_list_mol_type_tail_set
    __swig_getmethods__["mol_type_tail"] = _example.mcell_species_list_mol_type_tail_get
    if _newclass:
        mol_type_tail = _swig_property(_example.mcell_species_list_mol_type_tail_get, _example.mcell_species_list_mol_type_tail_set)

    def __init__(self):
        this = _example.new_mcell_species_list()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _example.delete_mcell_species_list
    __del__ = lambda self: None
mcell_species_list_swigregister = _example.mcell_species_list_swigregister
mcell_species_list_swigregister(mcell_species_list)


def mcell_create_species(state, species, species_ptr):
    return _example.mcell_create_species(state, species, species_ptr)
mcell_create_species = _example.mcell_create_species

def mcell_add_to_species_list(species_ptr, is_oriented, orientation, species_list):
    return _example.mcell_add_to_species_list(species_ptr, is_oriented, orientation, species_list)
mcell_add_to_species_list = _example.mcell_add_to_species_list

def mcell_delete_species_list(species):
    return _example.mcell_delete_species_list(species)
mcell_delete_species_list = _example.mcell_delete_species_list

def new_mol_species(state, name, sym_ptr):
    return _example.new_mol_species(state, name, sym_ptr)
new_mol_species = _example.new_mol_species

def mcell_create_viz_output(state, filename, mol_viz_list, start, end, step):
    return _example.mcell_create_viz_output(state, filename, mol_viz_list, start, end, step)
mcell_create_viz_output = _example.mcell_create_viz_output

def mcell_new_viz_output_block(vizblk):
    return _example.mcell_new_viz_output_block(vizblk)
mcell_new_viz_output_block = _example.mcell_new_viz_output_block

def mcell_create_viz_frame(time_type, type, iteration_list):
    return _example.mcell_create_viz_frame(time_type, type, iteration_list)
mcell_create_viz_frame = _example.mcell_create_viz_frame

def mcell_set_molecule_viz_state(vizblk, specp, viz_state):
    return _example.mcell_set_molecule_viz_state(vizblk, specp, viz_state)
mcell_set_molecule_viz_state = _example.mcell_set_molecule_viz_state

def mcell_add_surf_class_properties(state, reaction_type, sc_sym, reactant_sym, orient):
    return _example.mcell_add_surf_class_properties(state, reaction_type, sc_sym, reactant_sym, orient)
mcell_add_surf_class_properties = _example.mcell_add_surf_class_properties

def mcell_create_surf_class(state, surf_class_name, sc_sym):
    return _example.mcell_create_surf_class(state, surf_class_name, sc_sym)
mcell_create_surf_class = _example.mcell_create_surf_class

def mcell_add_mol_release_to_surf_class(state, sc_sym, sm_info, quantity, density_or_num, smd_list):
    return _example.mcell_add_mol_release_to_surf_class(state, sc_sym, sm_info, quantity, density_or_num, smd_list)
mcell_add_mol_release_to_surf_class = _example.mcell_add_mol_release_to_surf_class

def mcell_assign_surf_class_to_region(sc_sym, rgn):
    return _example.mcell_assign_surf_class_to_region(sc_sym, rgn)
mcell_assign_surf_class_to_region = _example.mcell_assign_surf_class_to_region

def alloc_vsprintf(fmt, args):
    return _example.alloc_vsprintf(fmt, args)
alloc_vsprintf = _example.alloc_vsprintf

def alloc_sprintf(fmt):
    return _example.alloc_sprintf(fmt)
alloc_sprintf = _example.alloc_sprintf

def my_strcat(s1, s2):
    return _example.my_strcat(s1, s2)
my_strcat = _example.my_strcat

def strip_quotes(s):
    return _example.strip_quotes(s)
strip_quotes = _example.strip_quotes
# This file is compatible with both classic and new-style classes.


