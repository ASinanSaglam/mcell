REACTION_DATA_OUTPUT
{
    OUTPUT_BUFFER_SIZE = 10
    STEP = 1e-6

    {5 : "constant #1"} => "counting-1.txt"
    SHOW_EXACT_TIME = FALSE
    {6 : "constant #2"} > "counting-2.txt"
    HEADER = NONE
    {7 : "constant #3"} >> "counting-3.txt"
    SHOW_EXACT_TIME = TRUE
    {8 : "constant #4"} >>> "counting-4.txt"
    HEADER = FALSE
    {9 : "constant #5"} +> "counting-5.txt"
    HEADER = TRUE
    {10 : "constant #5"} => "counting-6.txt"
    HEADER = "Duck, Duck, Goose"
    {
        11 : "constant #6",
        12 : "constant #7",
        13 : "constant #8"
    } => "counting-7.txt"
    HEADER = FALSE
    {COUNT["*", WORLD]} => "counting-8.txt"
}
REACTION_DATA_OUTPUT
{
    OUTPUT_BUFFER_SIZE = 11
    ITERATION_LIST = [[1 TO 1000 STEP 2]]
    {COUNT["s_g_1", WORLD] : "s_g_1 molecules", COUNT["s_g_2", WORLD] : "s_g_2 molecules"} => "counting-9.txt"
    {SUM(COUNT["*", WORLD])} => "counting-10.txt"
    {
        COUNT[s_v_1, WORLD],
        COUNT[s_v_3, WORLD],
        (COUNT[s_v_1, WORLD] + COUNT[s_v_3, WORLD]),
        (COUNT[s_v_1, WORLD] * COUNT[s_v_3, WORLD]),
        (COUNT[s_v_1, WORLD] / COUNT[s_v_3, WORLD]),
        (COUNT[s_v_1, WORLD] - COUNT[s_v_3, WORLD]),
        (- COUNT[s_v_3, WORLD]),
        2*(COUNT[s_v_1, WORLD] + COUNT[s_v_3, WORLD])+(COUNT[s_v_1, WORLD] * COUNT[s_v_3, WORLD]),
        12
    } => "counting-11.txt"
    {COUNT["s_g_1'", world.big_object.box1]} => "counting-12.txt"
    {COUNT[rxn1, WORLD]} => "counting-13.txt"
    {COUNT[s_g_1{0}, world.big_object.box1]} => "counting-14.txt"
    {COUNT[SUBUNIT{c_s_0 : s_g_0}, WORLD]} => "counting-15.txt"
    {COUNT[SUBUNIT{c_s_0 : s_g_0 [r0001 == s_g_1 & r0010 == s_g_2]}, WORLD]} => "counting-16.txt"
}
